//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/RSUBroadcast.msg.
//

#ifndef __VEINS_RSUBROADCAST_M_H
#define __VEINS_RSUBROADCAST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/RSUBroadcast.msg:27</tt> by nedtool.
 * <pre>
 * packet RSUBroadcast extends BaseFrame1609_4
 * {
 *     int broadcastId;
 *     string vehIdAndScoresCSV;
 *     string blacklistCSV;
 * }
 * </pre>
 */
class VEINS_API RSUBroadcast : public ::veins::BaseFrame1609_4
{
  protected:
    int broadcastId;
    ::omnetpp::opp_string vehIdAndScoresCSV;
    ::omnetpp::opp_string blacklistCSV;

  private:
    void copy(const RSUBroadcast& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RSUBroadcast&);

  public:
    RSUBroadcast(const char *name=nullptr, short kind=0);
    RSUBroadcast(const RSUBroadcast& other);
    virtual ~RSUBroadcast();
    RSUBroadcast& operator=(const RSUBroadcast& other);
    virtual RSUBroadcast *dup() const override {return new RSUBroadcast(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getBroadcastId() const;
    virtual void setBroadcastId(int broadcastId);
    virtual const char * getVehIdAndScoresCSV() const;
    virtual void setVehIdAndScoresCSV(const char * vehIdAndScoresCSV);
    virtual const char * getBlacklistCSV() const;
    virtual void setBlacklistCSV(const char * blacklistCSV);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RSUBroadcast& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RSUBroadcast& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_RSUBROADCAST_M_H

